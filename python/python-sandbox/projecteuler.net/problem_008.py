# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
# 
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
# 
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

def main():
  data  = list('73167176531330624919225119674426574742355349194934')
  data += list('96983520312774506326239578318016984801869478851843')
  data += list('85861560789112949495459501737958331952853208805511')
  data += list('12540698747158523863050715693290963295227443043557')
  data += list('66896648950445244523161731856403098711121722383113')
  data += list('62229893423380308135336276614282806444486645238749')
  data += list('30358907296290491560440772390713810515859307960866')
  data += list('70172427121883998797908792274921901699720888093776')
  data += list('65727333001053367881220235421809751254540594752243')
  data += list('52584907711670556013604839586446706324415722155397')
  data += list('53697817977846174064955149290862569321978468622482')
  data += list('83972241375657056057490261407972968652414535100474')
  data += list('82166370484403199890008895243450658541227588666881')
  data += list('16427171479924442928230863465674813919123162824586')
  data += list('17866458359124566529476545682848912883142607690042')
  data += list('24219022671055626321111109370544217506941658960408')
  data += list('07198403850962455444362981230987879927244284909188')
  data += list('84580156166097919133875499200524063689912560717606')
  data += list('05886116467109405077541002256983155200055935729725')
  data += list('71636269561882670428252483600823257530420752963450')

  sequence = [int(i) for i in data]

  solve(sequence, 13)

def solve(sequence, adjacent_digits):
  position = 0
  current_sequence = sequence[position:position + adjacent_digits]

  max_sequence = []
  max_sequence_total = 0

  while len(current_sequence) == adjacent_digits:
    current_sequence_total = multiply(current_sequence)

    print(position, ': ', current_sequence, ' = ', current_sequence_total, sep = '')

    if (current_sequence_total > max_sequence_total):
      max_sequence = current_sequence
      max_sequence_total = current_sequence_total


    position += 1
    current_sequence = sequence[position:position + adjacent_digits]

  print('Result: ', max_sequence, ' = ', max_sequence_total, sep = '')

def multiply(sequence):
  total = 0

  for n in sequence:
    if total == 0:
      total = n
    else:
      total *= n

  return total

main()
